#!/bin/bash
# Documentation management tools for NCPS

# Make scripts executable
chmod +x convert_docs.py test_docs.py create_doc.py fix_rst.py log_parser.py

# Set up variables
TOOLS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOCS_DIR="$(dirname "$TOOLS_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

function check_venv() {
    if [[ -z "${VIRTUAL_ENV}" ]]; then
        echo -e "${YELLOW}Warning: Virtual environment not activated${NC}"
        echo "Please run: source activate_docs"
        exit 1
    fi
}

function check_pandoc() {
    if ! command -v pandoc &> /dev/null; then
        echo -e "${RED}Error: pandoc is not installed${NC}"
        echo "Please install pandoc first:"
        echo "  macOS: brew install pandoc"
        echo "  Linux: sudo apt-get install pandoc"
        exit 1
    fi
}

function show_help() {
    echo -e "${GREEN}NCPS Documentation Tools${NC}"
    echo
    echo "Usage: doctools COMMAND [args...]"
    echo
    echo "Commands:"
    echo "  convert     Convert markdown to RST and organize"
    echo "  test        Run documentation tests"
    echo "  create      Create new documentation"
    echo "  build       Build documentation (default: html)"
    echo "  preview     Build and preview documentation"
    echo "  clean       Clean build directory"
    echo "  fix         Fix RST syntax issues"
    echo "  logs        View build logs"
    echo "  help        Show this help message"
    echo
    echo "Build Options:"
    echo "  --pdf       Build PDF documentation"
    echo "  --epub      Build EPUB documentation"
    echo "  --all       Build all formats"
    echo
    echo "Log Options:"
    echo "  logs                    View all build issues"
    echo "  logs warnings          View only warnings"
    echo "  logs errors            View only errors"
    echo "  logs missing-refs      View only missing references"
    echo "  logs syntax            View only syntax issues"
    echo
    echo "Examples:"
    echo "  doctools convert              # Convert all markdown files"
    echo "  doctools test                 # Run all tests"
    echo "  doctools create guide.rst     # Create new guide"
    echo "  doctools build                # Build HTML docs"
    echo "  doctools build --pdf          # Build PDF docs"
    echo "  doctools preview              # Build and open in browser"
    echo "  doctools fix                  # Fix RST syntax"
    echo "  doctools logs                 # View build issues"
}

function run_convert() {
    echo -e "${GREEN}Converting documentation...${NC}"
    check_pandoc
    if python "$TOOLS_DIR/convert_docs.py"; then
        echo -e "${GREEN}Conversion completed successfully${NC}"
    else
        echo -e "${RED}Conversion failed${NC}"
        exit 1
    fi
}

function run_test() {
    echo -e "${GREEN}Testing documentation...${NC}"
    # First fix RST syntax
    run_fix
    # Then run tests
    if python "$TOOLS_DIR/test_docs.py"; then
        echo -e "${GREEN}All tests passed${NC}"
    else
        echo -e "${RED}Tests failed${NC}"
        exit 1
    fi
}

function run_create() {
    if [ -z "$2" ]; then
        echo -e "${RED}Error: Please specify document title${NC}"
        echo "Usage: doctools create TITLE [--template TYPE] [--directory DIR]"
        exit 1
    fi
    if python "$TOOLS_DIR/create_doc.py" "$@"; then
        echo -e "${GREEN}Document created successfully${NC}"
    else
        echo -e "${RED}Failed to create document${NC}"
        exit 1
    fi
}

function run_build() {
    local build_type="html"
    local build_all=false

    # Parse build options
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            --pdf) build_type="latexpdf" ;;
            --epub) build_type="epub" ;;
            --all) build_all=true ;;
            *) echo -e "${RED}Unknown build option: $1${NC}" && exit 1 ;;
        esac
        shift
    done

    echo -e "${GREEN}Building documentation...${NC}"
    # Fix RST syntax before building
    run_fix
    
    cd "$DOCS_DIR" || exit 1

    # Use log parser for build
    if [ "$build_all" = true ]; then
        echo "Building all formats..."
        python "$TOOLS_DIR/log_parser.py" build "make html && make latexpdf && make epub"
    else
        echo "Building $build_type..."
        python "$TOOLS_DIR/log_parser.py" build "make $build_type"
    fi

    # Check build status
    if [ -f "$DOCS_DIR/_build/html/index.html" ]; then
        echo -e "${GREEN}Build completed successfully${NC}"
        echo "Use 'doctools logs' to view any warnings or errors"
    else
        echo -e "${RED}Build failed${NC}"
        echo "Use 'doctools logs errors' to view error details"
        exit 1
    fi
}

function run_preview() {
    echo -e "${GREEN}Building and previewing documentation...${NC}"
    run_build
    
    local index_path="$DOCS_DIR/_build/html/index.html"
    if [ ! -f "$index_path" ]; then
        echo -e "${RED}Error: Documentation not built. Run 'doctools build' first${NC}"
        exit 1
    fi

    echo "Opening documentation in browser..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        open "$index_path"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        xdg-open "$index_path"
    else
        echo -e "${YELLOW}Warning: Could not detect browser. Please open:${NC}"
        echo "$index_path"
    fi
}

function run_clean() {
    echo -e "${GREEN}Cleaning build directory...${NC}"
    cd "$DOCS_DIR" && make clean
    echo -e "${GREEN}Build directory cleaned${NC}"
}

function run_fix() {
    echo -e "${GREEN}Fixing RST syntax...${NC}"
    if python "$TOOLS_DIR/fix_rst.py"; then
        echo -e "${GREEN}RST syntax fixed successfully${NC}"
    else
        echo -e "${RED}Failed to fix RST syntax${NC}"
        exit 1
    fi
}

function run_logs() {
    local category=""
    case "$1" in
        warnings) category="warnings" ;;
        errors) category="errors" ;;
        missing-refs) category="missing_refs" ;;
        syntax) category="syntax_issues" ;;
    esac
    
    python "$TOOLS_DIR/log_parser.py" view "$category"
}

# Check virtual environment for all commands except help
if [ "$1" != "help" ] && [ "$1" != "--help" ] && [ "$1" != "-h" ]; then
    check_venv
fi

# Main command processing
case "$1" in
    convert)
        run_convert
        ;;
    test)
        run_test
        ;;
    create)
        shift
        run_create "$@"
        ;;
    build)
        shift
        run_build "$@"
        ;;
    preview)
        run_preview
        ;;
    clean)
        run_clean
        ;;
    fix)
        run_fix
        ;;
    logs)
        shift
        run_logs "$@"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Error: Unknown command '$1'${NC}"
        echo "Run 'doctools help' for usage information"
        exit 1
        ;;
esac